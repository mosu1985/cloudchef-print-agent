#!/usr/bin/env node

/**
 * üß™ –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ CloudChef Print Agent
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç:
 * 1. –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ñ–ª–∞–≥ isFirstRun –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∞–≥–µ–Ω—Ç–∞
 * 2. –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å popup –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
 */

const fs = require('fs');
const path = require('path');
const os = require('os');

// –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ electron-store
const getConfigPath = () => {
  if (process.platform === 'win32') {
    return path.join(os.homedir(), 'AppData', 'Roaming', 'cloudchef-print-agent', 'config.json');
  } else if (process.platform === 'darwin') {
    return path.join(os.homedir(), 'Library', 'Application Support', 'cloudchef-print-agent', 'config.json');
  } else {
    return path.join(os.homedir(), '.config', 'cloudchef-print-agent', 'config.json');
  }
};

const configPath = getConfigPath();

console.log('üß™ –¢–µ—Å—Ç –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ CloudChef Print Agent');
console.log('üìÅ –ü—É—Ç—å –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º:', configPath);

try {
  if (fs.existsSync(configPath)) {
    // –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    const config = JSON.parse(fs.readFileSync(configPath, 'utf8'));
    
    console.log('üìã –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:');
    console.log('   isFirstRun:', config.isFirstRun ?? 'undefined');
    console.log('   autoLaunch:', config.autoLaunch ?? 'undefined');
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
    config.isFirstRun = true;
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    fs.writeFileSync(configPath, JSON.stringify(config, null, 2));
    
    console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:');
    console.log('   isFirstRun: true (—Å–±—Ä–æ—à–µ–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)');
    console.log('');
    
    const osName = process.platform === 'win32' ? 'Windows' : 
                   process.platform === 'darwin' ? 'macOS' : 'Linux';
    
    console.log(`üöÄ –¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∞–≥–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è popup –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ –Ω–∞ ${osName}:`);
    console.log('   npm run dev');
    console.log('');
    
  } else {
    console.log('‚ÑπÔ∏è  –§–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    console.log('   –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –∞–≥–µ–Ω—Ç –µ—â–µ –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª—Å—è.');
    console.log('   –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.');
    console.log('');
    
    const osName = process.platform === 'win32' ? 'Windows' : 
                   process.platform === 'darwin' ? 'macOS' : 'Linux';
    
    console.log(`üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∞–≥–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ ${osName}:`);
    console.log('   npm run dev');
    console.log('');
  }
  
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  process.exit(1);
}

console.log('üìñ –ß—Ç–æ –æ–∂–∏–¥–∞—Ç—å:');
console.log('1. –ê–≥–µ–Ω—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è');
console.log('2. –ü–æ—è–≤–∏—Ç—Å—è popup —Å –≤–æ–ø—Ä–æ—Å–æ–º –æ–± –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–µ');
console.log('3. –ü—Ä–∏ –≤—ã–±–æ—Ä–µ "–î–∞" - –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫ –≤–∫–ª—é—á–∏—Ç—Å—è');
console.log('4. –ü—Ä–∏ –≤—ã–±–æ—Ä–µ "–ù–µ—Ç" - –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –æ—Ç–∫–ª—é—á–µ–Ω');
console.log('5. –§–ª–∞–≥ isFirstRun –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ false');
console.log('');
console.log('üîÑ –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞');
