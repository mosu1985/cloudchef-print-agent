"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SocketManager = void 0;
const socket_io_client_1 = require("socket.io-client");
const log = __importStar(require("electron-log"));
class SocketManager {
    socket = null;
    serverUrl;
    restaurantCode = '';
    agentToken = ''; // üîë –¢–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞
    onConnectionChange;
    reconnectAttempts = 0;
    maxReconnectAttempts = 5;
    heartbeatInterval = null;
    isRegistered = false;
    registrationTimeout = null;
    registrationRetryInterval = null;
    registrationRetries = 0;
    maxRegistrationRetries = 5;
    constructor(serverUrl, onConnectionChange) {
        this.serverUrl = serverUrl;
        this.onConnectionChange = onConnectionChange;
    }
    updateServerUrl(url) {
        if (this.serverUrl !== url) {
            this.serverUrl = url;
            if (this.socket) {
                this.disconnect();
                if (this.restaurantCode) {
                    this.connectToRestaurant(this.restaurantCode);
                }
            }
        }
    }
    setRestaurantCode(code) {
        this.restaurantCode = code;
    }
    setAgentToken(token) {
        this.agentToken = token;
        // üîç –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –∏–∑ —Ç–æ–∫–µ–Ω–∞
        // –§–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞: agent_<restaurantCode>_<randomKey>
        const tokenPattern = /^agent_([A-Z0-9]{8})_[a-f0-9]{32}$/;
        const match = token.match(tokenPattern);
        if (match && match[1]) {
            const restaurantCode = match[1];
            this.restaurantCode = restaurantCode;
            log.info('üîë –ö–æ–¥ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –∏–∑–≤–ª–µ—á–µ–Ω –∏–∑ —Ç–æ–∫–µ–Ω–∞', { restaurantCode });
        }
        else {
            log.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–æ–¥ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –∏–∑ —Ç–æ–∫–µ–Ω–∞ - –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç');
        }
    }
    async connectToRestaurant(code) {
        this.restaurantCode = code;
        try {
            await this.connect();
            return { success: true };
        }
        catch (error) {
            log.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É:', error);
            return { success: false, message: String(error) };
        }
    }
    async connect() {
        if (this.socket?.connected) {
            this.disconnect();
        }
        log.info(`–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É: ${this.serverUrl}`);
        return new Promise((resolve, reject) => {
            const timeout = setTimeout(() => {
                reject(new Error('–¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É'));
            }, 10000);
            this.socket = (0, socket_io_client_1.io)(this.serverUrl, {
                transports: ['websocket', 'polling'],
                timeout: 20000,
                reconnection: true,
                reconnectionDelay: 2000,
                reconnectionAttempts: this.maxReconnectAttempts,
                auth: {
                    token: this.agentToken, // üîë –ü–µ—Ä–µ–¥–∞—ë–º —Ç–æ–∫–µ–Ω –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                },
                query: {
                    clientType: 'agent' // –£–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø –∫–ª–∏–µ–Ω—Ç–∞
                }
            });
            // üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
            this.socket.on('connect', () => {
                clearTimeout(timeout);
                log.info('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
                this.reconnectAttempts = 0;
                this.onConnectionChange('server-connected');
                // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
                // –ü—Ä–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–æ–±—ã—Ç–∏–µ 'reconnect'
                if (this.restaurantCode && !this.isRegistered) {
                    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ç–∞–π–º–µ—Ä—ã –µ—Å–ª–∏ –µ—Å—Ç—å
                    this.clearRegistrationTimers();
                    this.registrationRetries = 0;
                    // –î–∞—ë–º —Å–µ—Ä–≤–µ—Ä—É –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å middleware –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (5 —Å–µ–∫—É–Ω–¥ –¥–ª—è Render.com cold start)
                    log.info('‚è∞ –û–∂–∏–¥–∞–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –∞–≥–µ–Ω—Ç–∞ (Render.com cold start)...');
                    this.registrationTimeout = setTimeout(() => {
                        if (this.socket?.connected && !this.isRegistered) {
                            log.info('‚è∞ –ó–∞–¥–µ—Ä–∂–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∞–≥–µ–Ω—Ç–∞ (–ø–æ–ø—ã—Ç–∫–∞ 1)');
                            this.registerAsAgent();
                            // –ó–∞–ø—É—Å–∫–∞–µ–º retry –º–µ—Ö–∞–Ω–∏–∑–º
                            this.startRegistrationRetry();
                        }
                    }, 5000); // 5000ms –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è Render.com cold start
                }
                this.startHeartbeat();
                resolve();
            });
            // ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            this.socket.on('connect_error', (error) => {
                clearTimeout(timeout);
                log.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É:', error.message);
                this.onConnectionChange('error');
                reject(error);
            });
            // üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            this.socket.on('reconnect', (attemptNumber) => {
                log.info(`–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ (–ø–æ–ø—ã—Ç–∫–∞ ${attemptNumber})`);
                this.onConnectionChange('server-connected');
                // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É–∂–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –≤ —Å–æ–±—ã—Ç–∏–∏ 'connect'
                // –ó–¥–µ—Å—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –Ω—É–∂–Ω–∞
                log.info('–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
            });
            this.socket.on('reconnect_attempt', (attemptNumber) => {
                log.info(`–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ${attemptNumber}/${this.maxReconnectAttempts}`);
            });
            this.socket.on('reconnect_error', (error) => {
                log.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error.message);
                this.onConnectionChange('error');
            });
            this.socket.on('reconnect_failed', () => {
                log.error('–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å');
                this.onConnectionChange('error');
            });
            // üì° –û—Ç–∫–ª—é—á–µ–Ω–∏–µ
            this.socket.on('disconnect', (reason) => {
                log.info('–û—Ç–∫–ª—é—á–µ–Ω –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', reason);
                this.onConnectionChange('disconnected');
                this.stopHeartbeat();
                this.clearRegistrationTimers(); // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                this.isRegistered = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
                if (reason === 'io server disconnect') {
                    // –°–µ—Ä–≤–µ—Ä –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–∏–ª - –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
                    this.socket?.connect();
                }
            });
            // üì• –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞
            this.socket.on('agent_registered', () => {
                log.info('‚úÖ –ê–≥–µ–Ω—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ');
                this.isRegistered = true;
                this.clearRegistrationTimers(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º retry –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                this.onConnectionChange('connected');
            });
            this.socket.on('registration_error', (error) => {
                log.error('‚ùå –û–®–ò–ë–ö–ê –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò –ê–ì–ï–ù–¢–ê:', error);
                log.error('üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –∫–æ–¥ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∫–æ–¥–æ–º –≤ —Ç–æ–∫–µ–Ω–µ –∞–≥–µ–Ω—Ç–∞!');
                log.error('üîç –¢–æ–∫–µ–Ω:', this.agentToken?.substring(0, 30) + '...');
                log.error('üîç –ö–æ–¥ –∏–∑ —Ç–æ–∫–µ–Ω–∞:', this.agentToken?.split('_')[1]);
                log.error('üîç –ö–æ–¥ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', this.restaurantCode);
                this.onConnectionChange('error');
            });
            // üîê –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞ (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ)
            this.socket.on('authentication_error', (error) => {
                log.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –¢–æ–∫–µ–Ω –∞–≥–µ–Ω—Ç–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω:', error.message);
                this.onConnectionChange('error');
                // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                this.socket?.removeAllListeners();
                this.socket?.disconnect();
                this.socket = null;
                // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å
                log.error('‚ö†Ô∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –∞–≥–µ–Ω—Ç–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.');
            });
            // üñ®Ô∏è –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –ø–µ—á–∞—Ç–∏
            this.socket.on('print_job', (data) => {
                log.info('üñ®Ô∏è *** –ü–û–õ–£–ß–ï–ù–ê –ö–û–ú–ê–ù–î–ê –ü–ï–ß–ê–¢–ò ***', data);
                const printJob = {
                    jobId: data.jobId,
                    labelData: data.labelData,
                    timestamp: new Date()
                };
                // –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
                this.onPrintJob(printJob);
            });
            // üîç –û–¢–õ–ê–î–ö–ê: –°–ª—É—à–∞–µ–º –í–°–ï —Å–æ–±—ã—Ç–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            this.socket.onAny((eventName, ...args) => {
                log.info(`üîç DEBUG: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ "${eventName}"`, args);
            });
            // üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
            this.socket.on('server_stats', (stats) => {
                log.debug('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', stats);
            });
        });
    }
    registerAsAgent() {
        if (!this.socket || !this.restaurantCode) {
            log.error('–ù–µ —É–¥–∞–µ—Ç—Å—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–≥–µ–Ω—Ç: –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–ª–∏ –∫–æ–¥–∞');
            return;
        }
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        if (this.isRegistered) {
            log.info('‚úÖ –ê–≥–µ–Ω—Ç —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é');
            return;
        }
        log.info(`üîó –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞ —Å –∫–æ–¥–æ–º: ${this.restaurantCode}`);
        const printerInfo = {
            name: 'CloudChef Print Agent',
            type: 'Thermal Label Printer',
            status: 'ready'
        };
        const registrationData = {
            code: this.restaurantCode,
            printerInfo: printerInfo
        };
        log.info('üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞:', registrationData);
        this.socket.emit('register_agent', registrationData);
        // isRegistered —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –≤ true –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è agent_registered
    }
    startHeartbeat() {
        this.stopHeartbeat();
        this.heartbeatInterval = setInterval(() => {
            if (this.socket?.connected) {
                this.socket.emit('agent_heartbeat', {
                    status: 'active',
                    timestamp: Date.now(),
                    printerStatus: 'ready'
                });
            }
        }, 30000); // –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    }
    stopHeartbeat() {
        if (this.heartbeatInterval) {
            clearInterval(this.heartbeatInterval);
            this.heartbeatInterval = null;
        }
    }
    clearRegistrationTimers() {
        if (this.registrationTimeout) {
            clearTimeout(this.registrationTimeout);
            this.registrationTimeout = null;
        }
        if (this.registrationRetryInterval) {
            clearInterval(this.registrationRetryInterval);
            this.registrationRetryInterval = null;
        }
        this.registrationRetries = 0;
    }
    startRegistrationRetry() {
        // –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã, –º–∞–∫—Å–∏–º—É–º 5 —Ä–∞–∑
        this.registrationRetryInterval = setInterval(() => {
            if (this.isRegistered) {
                // –£–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º retry
                this.clearRegistrationTimers();
                return;
            }
            if (this.registrationRetries >= this.maxRegistrationRetries) {
                log.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–≥–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ ${this.maxRegistrationRetries} –ø–æ–ø—ã—Ç–æ–∫`);
                log.error('üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–≥–µ–Ω—Ç');
                this.clearRegistrationTimers();
                return;
            }
            if (this.socket?.connected && !this.isRegistered) {
                this.registrationRetries++;
                log.info(`üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞ (–ø–æ–ø—ã—Ç–∫–∞ ${this.registrationRetries + 1}/${this.maxRegistrationRetries + 1})`);
                this.registerAsAgent();
            }
        }, 3000); // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
    }
    sendPrintResult(jobId, status, message) {
        if (!this.socket?.connected) {
            log.error('–ù–µ —É–¥–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—á–∞—Ç–∏: –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
            return;
        }
        log.info(`–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–µ—á–∞—Ç–∏: ${jobId} - ${status}`);
        this.socket.emit('print_result', {
            jobId: jobId,
            status: status,
            message: message,
            timestamp: Date.now()
        });
    }
    checkConnection() {
        log.info('üîç DEBUG: checkConnection - restaurantCode:', this.restaurantCode, 'socket connected:', this.socket?.connected);
        if (this.socket?.connected) {
            log.info('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ');
            if (this.restaurantCode && !this.isRegistered) {
                log.info('–ê–≥–µ–Ω—Ç –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é');
                this.registerAsAgent();
            }
            else if (this.isRegistered) {
                log.info('–ê–≥–µ–Ω—Ç —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é');
            }
        }
        else {
            log.info('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
            if (this.restaurantCode) {
                log.info('üîç DEBUG: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É:', this.restaurantCode);
                this.connectToRestaurant(this.restaurantCode);
            }
        }
    }
    disconnect() {
        if (this.socket) {
            log.info('–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
            this.stopHeartbeat();
            this.clearRegistrationTimers();
            this.socket.disconnect();
            this.socket = null;
        }
        this.onConnectionChange('disconnected');
    }
    isConnected() {
        return this.socket?.connected || false;
    }
    getConnectionInfo() {
        return {
            connected: this.isConnected(),
            serverUrl: this.serverUrl,
            restaurantCode: this.restaurantCode
        };
    }
    onPrintJob(printJob) {
        // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –±—É–¥–µ—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ main.ts —á–µ—Ä–µ–∑ bind
        log.info('Print job received:', printJob);
    }
}
exports.SocketManager = SocketManager;
//# sourceMappingURL=socket-manager.js.map