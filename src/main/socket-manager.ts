import { io, Socket } from 'socket.io-client';
import * as log from 'electron-log';
import { ConnectionStatus, PrintJob, LabelData } from '../shared/types';

export class SocketManager {
  private socket: Socket | null = null;
  private serverUrl: string;
  private restaurantCode: string = '';
  private agentToken: string = ''; // üîë –¢–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞
  private onConnectionChange: (status: ConnectionStatus) => void;
  private reconnectAttempts = 0;
  private maxReconnectAttempts = 5;
  private heartbeatInterval: NodeJS.Timeout | null = null;
  private isRegistered: boolean = false;

  constructor(serverUrl: string, onConnectionChange: (status: ConnectionStatus) => void) {
    this.serverUrl = serverUrl;
    this.onConnectionChange = onConnectionChange;
  }

  public updateServerUrl(url: string): void {
    if (this.serverUrl !== url) {
      this.serverUrl = url;
      if (this.socket) {
        this.disconnect();
        if (this.restaurantCode) {
          this.connectToRestaurant(this.restaurantCode);
        }
      }
    }
  }

  public setRestaurantCode(code: string): void {
    this.restaurantCode = code;
  }

  public setAgentToken(token: string): void {
    this.agentToken = token;
  }

  public async connectToRestaurant(code: string): Promise<{ success: boolean; message?: string }> {
    this.restaurantCode = code;
    
    try {
      await this.connect();
      return { success: true };
    } catch (error) {
      log.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É:', error);
      return { success: false, message: String(error) };
    }
  }

  private async connect(): Promise<void> {
    if (this.socket?.connected) {
      this.disconnect();
    }

    log.info(`–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É: ${this.serverUrl}`);
    
    return new Promise((resolve, reject) => {
      const timeout = setTimeout(() => {
        reject(new Error('–¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É'));
      }, 10000);

      this.socket = io(this.serverUrl, {
        transports: ['websocket', 'polling'],
        timeout: 20000,
        reconnection: true,
        reconnectionDelay: 2000,
        reconnectionAttempts: this.maxReconnectAttempts,
        auth: {
          token: this.agentToken, // üîë –ü–µ—Ä–µ–¥–∞—ë–º —Ç–æ–∫–µ–Ω –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        },
        query: {
          clientType: 'agent' // –£–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø –∫–ª–∏–µ–Ω—Ç–∞
        }
      });

      // üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
      this.socket.on('connect', () => {
        clearTimeout(timeout);
        log.info('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        this.reconnectAttempts = 0;
        this.onConnectionChange('server-connected');
        
        // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
        // –ü—Ä–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–æ–±—ã—Ç–∏–µ 'reconnect'
        if (this.restaurantCode && !this.isRegistered) {
          this.registerAsAgent();
        }
        
        this.startHeartbeat();
        resolve();
      });

      // ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      this.socket.on('connect_error', (error) => {
        clearTimeout(timeout);
        log.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É:', error.message);
        this.onConnectionChange('error');
        reject(error);
      });

      // üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
      this.socket.on('reconnect', (attemptNumber) => {
        log.info(`–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ (–ø–æ–ø—ã—Ç–∫–∞ ${attemptNumber})`);
        this.onConnectionChange('server-connected');
        
        // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É–∂–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –≤ —Å–æ–±—ã—Ç–∏–∏ 'connect'
        // –ó–¥–µ—Å—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –Ω—É–∂–Ω–∞
        log.info('–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
      });

      this.socket.on('reconnect_attempt', (attemptNumber) => {
        log.info(`–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ${attemptNumber}/${this.maxReconnectAttempts}`);
      });

      this.socket.on('reconnect_error', (error) => {
        log.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error.message);
        this.onConnectionChange('error');
      });

      this.socket.on('reconnect_failed', () => {
        log.error('–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å');
        this.onConnectionChange('error');
      });

      // üì° –û—Ç–∫–ª—é—á–µ–Ω–∏–µ
      this.socket.on('disconnect', (reason) => {
        log.info('–û—Ç–∫–ª—é—á–µ–Ω –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', reason);
        this.onConnectionChange('disconnected');
        this.stopHeartbeat();
        this.isRegistered = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
        
        if (reason === 'io server disconnect') {
          // –°–µ—Ä–≤–µ—Ä –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–∏–ª - –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
          this.socket?.connect();
        }
      });

      // üì• –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞
      this.socket.on('agent_registered', () => {
        log.info('–ê–≥–µ–Ω—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ');
        this.onConnectionChange('connected');
      });

      this.socket.on('registration_error', (error) => {
        log.error('‚ùå –û–®–ò–ë–ö–ê –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò –ê–ì–ï–ù–¢–ê:', error);
        log.error('üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –∫–æ–¥ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∫–æ–¥–æ–º –≤ —Ç–æ–∫–µ–Ω–µ –∞–≥–µ–Ω—Ç–∞!');
        log.error('üîç –¢–æ–∫–µ–Ω:', this.agentToken?.substring(0, 30) + '...');
        log.error('üîç –ö–æ–¥ –∏–∑ —Ç–æ–∫–µ–Ω–∞:', this.agentToken?.split('_')[1]);
        log.error('üîç –ö–æ–¥ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', this.restaurantCode);
        this.onConnectionChange('error');
      });

      // üîê –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞ (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ)
      this.socket.on('authentication_error', (error) => {
        log.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –¢–æ–∫–µ–Ω –∞–≥–µ–Ω—Ç–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω:', error.message);
        this.onConnectionChange('error');
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        this.socket?.removeAllListeners();
        this.socket?.disconnect();
        this.socket = null;
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å
        log.error('‚ö†Ô∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –∞–≥–µ–Ω—Ç–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.');
      });

      // üñ®Ô∏è –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –ø–µ—á–∞—Ç–∏
      this.socket.on('print_job', (data) => { // –í–ï–†–ù–£–õ –û–ë–†–ê–¢–ù–û –ù–ê 'print_job' - –°–ï–†–í–ï–† –û–¢–ü–†–ê–í–õ–Ø–ï–¢ –ò–ú–ï–ù–ù–û –≠–¢–û!
        log.info('üñ®Ô∏è *** –ü–û–õ–£–ß–ï–ù–ê –ö–û–ú–ê–ù–î–ê –ü–ï–ß–ê–¢–ò ***', data);
        const printJob: PrintJob = {
          jobId: data.jobId,
          labelData: data.labelData,
          timestamp: new Date()
        };
        
        // –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
        this.onPrintJob(printJob);
      });
      
      // üîç –û–¢–õ–ê–î–ö–ê: –°–ª—É—à–∞–µ–º –í–°–ï —Å–æ–±—ã—Ç–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
      this.socket.onAny((eventName, ...args) => {
        log.info(`üîç DEBUG: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ "${eventName}"`, args);
      });

      // üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
      this.socket.on('server_stats', (stats) => {
        log.debug('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', stats);
      });
    });
  }

  private registerAsAgent(): void {
    if (!this.socket || !this.restaurantCode) {
      log.error('–ù–µ —É–¥–∞–µ—Ç—Å—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–≥–µ–Ω—Ç: –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–ª–∏ –∫–æ–¥–∞');
      return;
    }

    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    if (this.isRegistered) {
      log.info('‚úÖ –ê–≥–µ–Ω—Ç —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é');
      return;
    }

    log.info(`üîó –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞ —Å –∫–æ–¥–æ–º: ${this.restaurantCode}`);
    
    const printerInfo = {
      name: 'CloudChef Print Agent',
      type: 'Thermal Label Printer',
      status: 'ready'
    };

    const registrationData = {
      code: this.restaurantCode,
      printerInfo: printerInfo
    };
    
    log.info('üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞:', registrationData);
    this.socket.emit('register_agent', registrationData);
    this.isRegistered = true;
  }

  private startHeartbeat(): void {
    this.stopHeartbeat();
    
    this.heartbeatInterval = setInterval(() => {
      if (this.socket?.connected) {
        this.socket.emit('agent_heartbeat', {
          status: 'active',
          timestamp: Date.now(),
          printerStatus: 'ready'
        });
      }
    }, 30000); // –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
  }

  private stopHeartbeat(): void {
    if (this.heartbeatInterval) {
      clearInterval(this.heartbeatInterval);
      this.heartbeatInterval = null;
    }
  }

  public sendPrintResult(jobId: string, status: 'success' | 'error', message: string): void {
    if (!this.socket?.connected) {
      log.error('–ù–µ —É–¥–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—á–∞—Ç–∏: –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
      return;
    }

    log.info(`–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–µ—á–∞—Ç–∏: ${jobId} - ${status}`);
    
    this.socket.emit('print_result', {
      jobId: jobId,
      status: status,
      message: message,
      timestamp: Date.now()
    });
  }

  public checkConnection(): void {
    if (this.socket?.connected) {
      log.info('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ');
      if (this.restaurantCode && !this.isRegistered) {
        log.info('–ê–≥–µ–Ω—Ç –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é');
        this.registerAsAgent();
      } else if (this.isRegistered) {
        log.info('–ê–≥–µ–Ω—Ç —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é');
      }
    } else {
      log.info('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
      if (this.restaurantCode) {
        this.connectToRestaurant(this.restaurantCode);
      }
    }
  }

  public disconnect(): void {
    if (this.socket) {
      log.info('–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
      this.stopHeartbeat();
      this.socket.disconnect();
      this.socket = null;
    }
    this.onConnectionChange('disconnected');
  }

  public isConnected(): boolean {
    return this.socket?.connected || false;
  }

  public getConnectionInfo(): { connected: boolean; serverUrl: string; restaurantCode: string } {
    return {
      connected: this.isConnected(),
      serverUrl: this.serverUrl,
      restaurantCode: this.restaurantCode
    };
  }

  public onPrintJob(printJob: PrintJob): void {
    // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –±—É–¥–µ—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ main.ts —á–µ—Ä–µ–∑ bind
    log.info('Print job received:', printJob);
  }
}
