import { execSync, exec } from 'child_process';
import * as log from 'electron-log';
import * as fs from 'fs';
import * as path from 'path';
import * as os from 'os';
import { BrowserWindow } from 'electron';
import { LabelData, PrinterInfo, PrintResult } from '../shared/types';

export class PrinterManager {
  private cachedPrinters: PrinterInfo[] = [];
  private lastCacheTime = 0;
  private cacheTimeout = 30000; // 30 —Å–µ–∫—É–Ω–¥

  public async getPrinters(): Promise<PrinterInfo[]> {
    const now = Date.now();
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∏–Ω—Ç–µ—Ä—ã, –µ—Å–ª–∏ –∫–µ—à —Å–≤–µ–∂–∏–π
    if (this.cachedPrinters.length > 0 && (now - this.lastCacheTime) < this.cacheTimeout) {
      return this.cachedPrinters;
    }

    try {
      const printers = await this.discoverPrinters();
      this.cachedPrinters = printers;
      this.lastCacheTime = now;
      return printers;
    } catch (error) {
      log.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤:', error);
      return this.cachedPrinters; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫–µ—à –ø—Ä–∏ –æ—à–∏–±–∫–µ
    }
  }

  private async discoverPrinters(): Promise<PrinterInfo[]> {
    const platform = process.platform;
    
    switch (platform) {
      case 'win32':
        return this.getWindowsPrinters();
      case 'darwin':
        return this.getMacOSPrinters();
      case 'linux':
        return this.getLinuxPrinters();
      default:
        throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞: ${platform}`);
    }
  }

  private async getWindowsPrinters(): Promise<PrinterInfo[]> {
    return new Promise((resolve, reject) => {
      // PowerShell –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤
      const command = `Get-Printer | ConvertTo-Json`;
      
      exec(`powershell -Command "${command}"`, { encoding: 'utf8' }, (error, stdout, stderr) => {
        if (error) {
          log.error('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è PowerShell:', error);
          reject(error);
          return;
        }

        if (stderr) {
          log.warn('PowerShell stderr:', stderr);
        }

        try {
          const printersData = JSON.parse(stdout);
          const printers = Array.isArray(printersData) ? printersData : [printersData];
          
          const printerInfos: PrinterInfo[] = printers
            .filter(p => p && p.Name)
            .map(p => ({
              name: p.Name || '',
              displayName: p.Name || '',
              description: p.Comment || p.Name || '',
              status: this.mapWindowsStatus(p.PrinterStatus || 0),
              isDefault: p.Default === true,
              type: this.detectPrinterType(p.Name || '', p.Comment || '')
            }));

          log.info(`–ù–∞–π–¥–µ–Ω–æ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤ Windows: ${printerInfos.length}`);
          resolve(printerInfos);
        } catch (parseError) {
          log.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤:', parseError);
          reject(parseError);
        }
      });
    });
  }

  private async getMacOSPrinters(): Promise<PrinterInfo[]> {
    return new Promise((resolve, reject) => {
      exec('lpstat -p -d', { encoding: 'utf8' }, (error, stdout, stderr) => {
        if (error && error.code !== 1) { // lpstat –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∫–æ–¥ 1, –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤
          log.error('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è lpstat:', error);
          reject(error);
          return;
        }

        if (stderr && !stderr.includes('no default destination')) {
          log.warn('lpstat stderr:', stderr);
        }

        try {
          const printerInfos: PrinterInfo[] = [];
          const lines = stdout.split('\\n');
          let defaultPrinter = '';

          // –ò—â–µ–º –ø—Ä–∏–Ω—Ç–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
          const defaultLine = lines.find(line => line.startsWith('system default destination:'));
          if (defaultLine) {
            defaultPrinter = defaultLine.split(': ')[1] || '';
          }

          // –ü–∞—Ä—Å–∏–º –ø—Ä–∏–Ω—Ç–µ—Ä—ã
          lines.forEach(line => {
            const match = line.match(/^printer (.*?) (.*)/);
            if (match && match[1]) {
              const name = match[1];
              const status = match[2] || '';
              
              printerInfos.push({
                name: name,
                displayName: name,
                description: name,
                status: status.includes('idle') ? 'ready' : 'busy',
                isDefault: name === defaultPrinter,
                type: this.detectPrinterType(name, '')
              });
            }
          });

          log.info(`–ù–∞–π–¥–µ–Ω–æ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤ macOS: ${printerInfos.length}`);
          resolve(printerInfos);
        } catch (parseError) {
          log.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤ macOS:', parseError);
          reject(parseError);
        }
      });
    });
  }

  private async getLinuxPrinters(): Promise<PrinterInfo[]> {
    return new Promise((resolve, reject) => {
      exec('lpstat -p -d', { encoding: 'utf8' }, (error, stdout, stderr) => {
        if (error && error.code !== 1) {
          log.error('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è lpstat Linux:', error);
          reject(error);
          return;
        }

        if (stderr) {
          log.warn('lpstat Linux stderr:', stderr);
        }

        try {
          const printerInfos: PrinterInfo[] = [];
          const lines = stdout.split('\\n');
          let defaultPrinter = '';

          // –ò—â–µ–º –ø—Ä–∏–Ω—Ç–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
          const defaultLine = lines.find(line => line.includes('default destination:'));
          if (defaultLine) {
            defaultPrinter = defaultLine.split(': ')[1] || '';
          }

          // –ü–∞—Ä—Å–∏–º –ø—Ä–∏–Ω—Ç–µ—Ä—ã
          lines.forEach(line => {
            const match = line.match(/^printer (.*?) (.*)/);
            if (match && match[1]) {
              const name = match[1];
              const status = match[2] || '';
              
              printerInfos.push({
                name: name,
                displayName: name,
                description: name,
                status: status.includes('idle') ? 'ready' : 'busy',
                isDefault: name === defaultPrinter,
                type: this.detectPrinterType(name, '')
              });
            }
          });

          log.info(`–ù–∞–π–¥–µ–Ω–æ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤ Linux: ${printerInfos.length}`);
          resolve(printerInfos);
        } catch (parseError) {
          log.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤ Linux:', parseError);
          reject(parseError);
        }
      });
    });
  }

  private mapWindowsStatus(status: number): 'ready' | 'busy' | 'error' | 'offline' {
    // –°—Ç–∞—Ç—É—Å—ã Windows –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤
    switch (status) {
      case 0: return 'ready';      // Idle
      case 1: return 'busy';       // Processing
      case 2: return 'busy';       // Printing
      case 3: return 'error';      // Error
      case 4: return 'offline';    // Offline
      case 5: return 'error';      // Paper jam
      case 6: return 'error';      // Out of paper
      case 7: return 'busy';       // Manual feed required
      default: return 'ready';
    }
  }

  private detectPrinterType(name: string, description: string): 'thermal' | 'inkjet' | 'laser' | 'unknown' {
    const text = (name + ' ' + description).toLowerCase();
    
    if (text.includes('thermal') || text.includes('zebra') || text.includes('label')) {
      return 'thermal';
    } else if (text.includes('laser') || text.includes('hp laser') || text.includes('brother laser')) {
      return 'laser';
    } else if (text.includes('inkjet') || text.includes('deskjet') || text.includes('officejet')) {
      return 'inkjet';
    }
    
    return 'unknown';
  }

  public async testPrint(printerName: string): Promise<PrintResult> {
    log.info(`–¢–µ—Å—Ç–æ–≤–∞—è –ø–µ—á–∞—Ç—å –Ω–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–µ: ${printerName}`);
    
    try {
      const testLabel: LabelData = {
        // –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (–æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–¥ –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å)
        id: 'test-' + Date.now(),
        labelId: 'TEST01',
        category: '–¢–ï–°–¢ –ü–ï–ß–ê–¢–ò', // –û—Å–Ω–æ–≤–Ω–æ–µ –ø–æ–ª–µ (–±—ã–ª–æ name)
        temperature: '+4¬∞C',
        shelfLifeDays: 1,
        productionDate: new Date().toISOString(),
        expiryDate: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),
        preparerName: 'CloudChef Agent', // –û–±–Ω–æ–≤–ª–µ–Ω–æ: –±—ã–ª–æ chef
        copies: 1,
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        method: '—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
        comment: '–¢–µ—Å—Ç–æ–≤–∞—è —ç—Ç–∏–∫–µ—Ç–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–Ω—Ç–µ—Ä–∞',
        purpose: 'test'
      };

      return await this.printLabel(printerName, testLabel);
    } catch (error) {
      log.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –ø–µ—á–∞—Ç–∏:', error);
      return {
        success: false,
        error: String(error)
      };
    }
  }

  public async printLabel(printerName: string, labelData: LabelData, offsetHorizontal = 0, offsetVertical = 0): Promise<PrintResult> {
    log.info(`–ü–µ—á–∞—Ç—å —ç—Ç–∏–∫–µ—Ç–∫–∏ –Ω–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–µ "${printerName}":`, labelData);
    
    try {
      let tempFile: string;
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å HTML - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF –∏–∑ HTML
      if (labelData.html) {
        log.info('üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF –∏–∑ HTML —ç—Ç–∏–∫–µ—Ç–∫–∏...');
        tempFile = await this.generatePDFFromHTML(labelData.html, offsetHorizontal, offsetVertical);
      } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç HTML - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –≤–µ—Ä—Å–∏—é (fallback)
        log.warn('‚ö†Ô∏è HTML –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é —ç—Ç–∏–∫–µ—Ç–∫—É');
        const labelContent = this.generateLabelContent(labelData);
        tempFile = path.join(os.tmpdir(), `cloudchef-label-${Date.now()}.txt`);
        fs.writeFileSync(tempFile, labelContent, 'utf8');
      }
      
      // –ü–µ—á–∞—Ç–∞–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
      const platform = process.platform;
      let success = false;
      
      switch (platform) {
        case 'win32':
          success = await this.printWindows(printerName, tempFile);
          break;
        case 'darwin':
          success = await this.printMacOS(printerName, tempFile);
          break;
        case 'linux':
          success = await this.printLinux(printerName, tempFile);
          break;
        default:
          throw new Error(`–ü–µ—á–∞—Ç—å –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ: ${platform}`);
      }
      
      // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
      try {
        fs.unlinkSync(tempFile);
      } catch (cleanupError) {
        log.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª:', cleanupError);
      }
      
      if (success) {
        log.info('–≠—Ç–∏–∫–µ—Ç–∫–∞ –Ω–∞–ø–µ—á–∞—Ç–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
        return { success: true };
      } else {
        throw new Error('–ü–µ—á–∞—Ç—å –Ω–µ —É–¥–∞–ª–∞—Å—å');
      }
      
    } catch (error) {
      log.error('–û—à–∏–±–∫–∞ –ø–µ—á–∞—Ç–∏ —ç—Ç–∏–∫–µ—Ç–∫–∏:', error);
      return {
        success: false,
        error: String(error)
      };
    }
  }
  
  private async generatePDFFromHTML(html: string, offsetHorizontal: number, offsetVertical: number): Promise<string> {
    return new Promise((resolve, reject) => {
      // –°–æ–∑–¥–∞–µ–º –Ω–µ–≤–∏–¥–∏–º–æ–µ –æ–∫–Ω–æ –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ HTML
      const printWindow = new BrowserWindow({
        show: false,
        width: 800,
        height: 600,
        webPreferences: {
          offscreen: true,
          nodeIntegration: false,
          contextIsolation: true
        }
      });
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ—Ñ—Å–µ—Ç—ã –∫ HTML –∏ –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ –ø–æ–ª–Ω—ã–π HTML –¥–æ–∫—É–º–µ–Ω—Ç
      const fullHTML = this.wrapHTMLWithStyles(html, offsetHorizontal, offsetVertical);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º HTML
      printWindow.loadURL(`data:text/html;charset=utf-8,${encodeURIComponent(fullHTML)}`);
      
      printWindow.webContents.on('did-finish-load', async () => {
        try {
          log.info('üìÑ HTML –∑–∞–≥—Ä—É–∂–µ–Ω, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF...');
          
          // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF —Å —Ç–æ—á–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏ —ç—Ç–∏–∫–µ—Ç–∫–∏ 60x40mm
          // –í Electron —Ä–∞–∑–º–µ—Ä—ã —É–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –≤ –º–∏–∫—Ä–æ–º–µ—Ç—Ä–∞—Ö (1mm = 1000 –º–∏–∫—Ä–æ–º–µ—Ç—Ä–æ–≤)
          const pdfData = await printWindow.webContents.printToPDF({
            pageSize: {
              width: 60000,  // 60mm
              height: 40000  // 40mm
            },
            margins: {
              top: 0,
              bottom: 0,
              left: 0,
              right: 0
            },
            printBackground: true,
            landscape: false,
            preferCSSPageSize: false
          });
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º PDF –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
          const tempFile = path.join(os.tmpdir(), `cloudchef-label-${Date.now()}.pdf`);
          fs.writeFileSync(tempFile, pdfData);
          
          log.info(`‚úÖ PDF —ç—Ç–∏–∫–µ—Ç–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞: ${tempFile} (${pdfData.length} –±–∞–π—Ç)`);
          
          // –ó–∞–∫—Ä—ã–≤–∞–µ–º –Ω–µ–≤–∏–¥–∏–º–æ–µ –æ–∫–Ω–æ
          printWindow.close();
          
          resolve(tempFile);
        } catch (error) {
          log.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF:', error);
          printWindow.close();
          reject(error);
        }
      });
      
      printWindow.webContents.on('did-fail-load', (event, errorCode, errorDescription) => {
        log.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ HTML:', errorDescription);
        printWindow.close();
        reject(new Error(errorDescription));
      });
      
      // –¢–∞–π–º–∞—É—Ç –Ω–∞ —Å–ª—É—á–∞–π –∑–∞–≤–∏—Å–∞–Ω–∏—è
      setTimeout(() => {
        if (!printWindow.isDestroyed()) {
          log.error('–¢–∞–π–º–∞—É—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF');
          printWindow.close();
          reject(new Error('–¢–∞–π–º–∞—É—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF'));
        }
      }, 10000);
    });
  }
  
  private wrapHTMLWithStyles(html: string, horizontal: number, vertical: number): string {
    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π HTML –¥–æ–∫—É–º–µ–Ω—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏ –∏ –æ—Ñ—Å–µ—Ç–∞–º–∏
    const offsetTransform = (horizontal !== 0 || vertical !== 0) 
      ? `transform: translate(${horizontal}mm, ${vertical}mm);` 
      : '';
    
    return `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="UTF-8">
        <style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }
          @page {
            size: 60mm 40mm;
            margin: 0;
          }
          html, body {
            width: 60mm;
            height: 40mm;
            margin: 0;
            padding: 0;
            overflow: hidden;
          }
          body {
            ${offsetTransform}
          }
        </style>
      </head>
      <body>
        ${html}
      </body>
      </html>
    `;
  }

  private generateLabelContent(labelData: LabelData): string {
    // –ï—Å–ª–∏ –µ—Å—Ç—å –≥–æ—Ç–æ–≤—ã–π HTML, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ (–≤ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–º –≤–∏–¥–µ –¥–ª—è —Ç–µ–∫—Å—Ç–∞)
    if (labelData.html) {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ HTML –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—è –Ω–∞–ø—Ä—è–º—É—é
      log.info('üé® –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —ç—Ç–∏–∫–µ—Ç–∫–∏');
    }
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const productionDate = labelData.productionDate ? 
      new Date(labelData.productionDate).toLocaleDateString('ru-RU') : '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
    const expiryDate = labelData.expiryDate ? 
      new Date(labelData.expiryDate).toLocaleDateString('ru-RU') : '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —ç—Ç–∏–∫–µ—Ç–∫–∏ —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏
    const lines = [
      '====================================',
      '         –≠–¢–ò–ö–ï–¢–ö–ê –ü–†–û–î–£–ö–¢–ê',
      '====================================',
      '',
      `–ü–†–û–î–£–ö–¢: ${labelData.category}`, // –û–±–Ω–æ–≤–ª–µ–Ω–æ: –±—ã–ª–æ name
      `–ü–û–í–ê–†: ${labelData.preparerName || '–ù–µ —É–∫–∞–∑–∞–Ω'}`, // –û–±–Ω–æ–≤–ª–µ–Ω–æ: –±—ã–ª–æ chef
      `–¢–ï–ú–ü–ï–†–ê–¢–£–†–ê: ${labelData.temperature || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}`,
      `–ò–ó–ì–û–¢–û–í–õ–ï–ù–û: ${productionDate}`,
      `–°–†–û–ö –ì–û–î–ù–û–°–¢–ò: ${expiryDate}`, // –û–±–Ω–æ–≤–ª–µ–Ω–æ: —Ç–µ–ø–µ—Ä—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ
      `–°–†–û–ö –•–†–ê–ù–ï–ù–ò–Ø: ${labelData.shelfLifeDays || '–ù–µ —É–∫–∞–∑–∞–Ω'} –¥–Ω.`,
      labelData.method ? `–ú–ï–¢–û–î: ${labelData.method}` : '',
      labelData.comment ? `–ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô: ${labelData.comment}` : '',
      labelData.labelId ? `ID –≠–¢–ò–ö–ï–¢–ö–ò: ${labelData.labelId}` : '',
      '',
      `–î–ê–¢–ê –ü–ï–ß–ê–¢–ò: ${new Date().toLocaleString('ru-RU')}`,
      `–ö–û–ü–ò–ô: ${labelData.copies || 1}`,
      '',
      '====================================',
      ''
    ];
    
    const result = lines.filter(line => line !== undefined && line !== '').join('\\n');
    log.info('üìÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —ç—Ç–∏–∫–µ—Ç–∫–∏:', result.substring(0, 200) + '...');
    return result;
  }

  private async printWindows(printerName: string, filePath: string): Promise<boolean> {
    return new Promise((resolve) => {
      // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∏–º—è –ø—Ä–∏–Ω—Ç–µ—Ä–∞ –∏ –ø—É—Ç—å –¥–ª—è PowerShell
      const escapedPrinter = printerName.replace(/"/g, '`"');
      const escapedPath = filePath.replace(/"/g, '`"').replace(/\\/g, '\\\\');
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
      const isPDF = filePath.toLowerCase().endsWith('.pdf');
      
      let command: string;
      
      if (isPDF) {
        // –î–ª—è PDF –∏—Å–ø–æ–ª—å–∑—É–µ–º SumatraPDF –∏–ª–∏ Adobe Reader –¥–ª—è –ø–µ—á–∞—Ç–∏
        // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –ø–µ—á–∞—Ç—å PDF —á–µ—Ä–µ–∑ shell
        command = `powershell -Command "Start-Process -FilePath '${escapedPath}' -ArgumentList '/t','${escapedPrinter}' -Verb Print -WindowStyle Hidden -Wait"`;
        
        log.info(`–û—Ç–ø—Ä–∞–≤–∫–∞ PDF –Ω–∞ –ø–µ—á–∞—Ç—å (Windows): ${printerName}`);
      } else {
        // –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º Out-Printer
        command = `powershell -Command "Get-Content '${escapedPath}' | Out-Printer -Name '${escapedPrinter}'"`;
        
        log.info(`–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –ø–µ—á–∞—Ç—å (Windows): ${printerName}`);
      }
      
      exec(command, { timeout: 30000 }, (error, stdout, stderr) => {
        if (error) {
          log.error('–û—à–∏–±–∫–∞ –ø–µ—á–∞—Ç–∏ Windows:', error);
          log.error('stderr:', stderr);
          resolve(false);
        } else {
          log.info('‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø–µ—á–∞—Ç—å Windows');
          if (stdout) log.info('stdout:', stdout);
          resolve(true);
        }
      });
    });
  }

  private async printMacOS(printerName: string, filePath: string): Promise<boolean> {
    return new Promise((resolve) => {
      const command = `lp -d "${printerName}" "${filePath}"`;
      
      exec(command, (error) => {
        if (error) {
          log.error('–û—à–∏–±–∫–∞ –ø–µ—á–∞—Ç–∏ macOS:', error);
          resolve(false);
        } else {
          resolve(true);
        }
      });
    });
  }

  private async printLinux(printerName: string, filePath: string): Promise<boolean> {
    return new Promise((resolve) => {
      const command = `lp -d "${printerName}" "${filePath}"`;
      
      exec(command, (error) => {
        if (error) {
          log.error('–û—à–∏–±–∫–∞ –ø–µ—á–∞—Ç–∏ Linux:', error);
          resolve(false);
        } else {
          resolve(true);
        }
      });
    });
  }

  public clearCache(): void {
    this.cachedPrinters = [];
    this.lastCacheTime = 0;
    log.info('–ö–µ—à –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤ –æ—á–∏—â–µ–Ω');
  }
}
