import { contextBridge, ipcRenderer } from 'electron';
import { AppSettings, ConnectionStatus, PrinterInfo, PrintResult, PrintJob } from '../shared/types';

// üîê –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ API –¥–ª—è —Ä–µ–Ω–¥–µ—Ä –ø—Ä–æ—Ü–µ—Å—Å–∞
const electronAPI = {
  // üì± –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
  getAppVersion: (): Promise<string> => ipcRenderer.invoke('get-app-version'),
  openLogs: (): Promise<void> => ipcRenderer.invoke('open-logs'),
  
  // ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏
  getSettings: (): Promise<AppSettings> => ipcRenderer.invoke('get-settings'),
  saveSettings: (settings: Partial<AppSettings>): Promise<{ success: boolean }> => 
    ipcRenderer.invoke('save-settings', settings),
  
  // üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
  connectToRestaurant: (code: string): Promise<{ success: boolean; message?: string }> => 
    ipcRenderer.invoke('connect-to-restaurant', code),
  disconnect: (): Promise<{ success: boolean }> => ipcRenderer.invoke('disconnect'),
  getConnectionStatus: (): Promise<{ status: ConnectionStatus; serverUrl: string; restaurantCode: string }> => 
    ipcRenderer.invoke('get-connection-status'),
  
  // üñ®Ô∏è –ü—Ä–∏–Ω—Ç–µ—Ä—ã
  getPrinters: (): Promise<PrinterInfo[]> => ipcRenderer.invoke('get-printers'),
  testPrinter: (printerName: string): Promise<PrintResult> => ipcRenderer.invoke('test-printer', printerName),
  
  // ü™ü –û–∫–Ω–æ
  minimizeToTray: (): Promise<void> => ipcRenderer.invoke('minimize-to-tray'),
  showWindow: (): Promise<void> => ipcRenderer.invoke('show-window'),
  
  // üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  checkForUpdates: (): Promise<void> => ipcRenderer.invoke('check-for-updates'),
  restartAndUpdate: (): Promise<void> => ipcRenderer.invoke('restart-and-update'),
  
  // üì° –°–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π
  onConnectionStatusChanged: (callback: (status: ConnectionStatus) => void) => {
    const handler = (_: any, status: ConnectionStatus) => callback(status);
    ipcRenderer.on('connection-status-changed', handler);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏
    return () => ipcRenderer.removeListener('connection-status-changed', handler);
  },
  
  onPrintJobReceived: (callback: (job: PrintJob) => void) => {
    const handler = (_: any, job: PrintJob) => callback(job);
    ipcRenderer.on('print-job-received', handler);
    
    return () => ipcRenderer.removeListener('print-job-received', handler);
  },
  
  onUpdateAvailable: (callback: () => void) => {
    const handler = () => callback();
    ipcRenderer.on('update-available', handler);
    
    return () => ipcRenderer.removeListener('update-available', handler);
  },
  
  onUpdateDownloaded: (callback: () => void) => {
    const handler = () => callback();
    ipcRenderer.on('update-downloaded', handler);
    
    return () => ipcRenderer.removeListener('update-downloaded', handler);
  }
};

// –≠–∫—Å–ø–æ—Ä—Ç API –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏
contextBridge.exposeInMainWorld('electronAPI', electronAPI);

// –¢–∏–ø–∏–∑–∞—Ü–∏—è –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ window
declare global {
  interface Window {
    electronAPI: typeof electronAPI;
  }
}



